options{}
PARSER_BEGIN(ExprsParse)
    public class ExprsParse {
        private static SymbolTable st = new SymbolTable();
        public static void main(String args []) {
            ExprsParse parser = new ExprsParse(System.in);
           try {
                parser.start();            
                System.out.println("Ausdruck ok");
            } catch (Exception e) {                
                System.out.println("Ausdruck nicht ok");
                System.out.println(e);
            }
        }
    }
PARSER_END(ExprsParse)

SKIP :{" "}
SKIP :{"\n"|"\r"|"\r\n"}
TOKEN :{
    <NUMBER : ["1"-"9"](["0"-"9"])* | "0">
    | <IDENT : ["a"-"z"](["a"-"z"] | ["A"-"Z"])*>
}
void start() throws SymbolAlreadyDefinedException, UnknownSymbolException:
{}
{    
    {
         st.addConstant("final", "");
         st.addConstant("int", "");
    }
    
    programm()<EOF>
}

void programm() throws SymbolAlreadyDefinedException, UnknownSymbolException:
{
    String a = null;
}
{
    constDecl() a=expression() { System.out.println(a);}
}

void constDecl() throws SymbolAlreadyDefinedException:
{}
{    
    ( "final int " constZuw() constList() ";")?
}

void constZuw() throws SymbolAlreadyDefinedException:
{
    Token a;
    Token b;
}
{
     a=<IDENT> "=" b=<NUMBER> 
     {st.addConstant(a.image.toString(), b.image.toString());} 
        
}
void constList() throws SymbolAlreadyDefinedException:

{}
{
    ("," constZuw() constList())?
}

String expression() throws UnknownSymbolException:
{
    String a= null;
    String b= null;
}
{
    a=term() b=sum() {return a+b;}
}

String sum() throws UnknownSymbolException:
{
    String a= null;
    String b= null;
}
{
    ("+" a=term() b=sum() { return a+b +"+"; } |
    "-" a=term() b=sum() { return a+ b +"-"; })?
    {return "";}
}

String term() throws UnknownSymbolException:
{
    String a= null;
    String b= null;
}
{
    a=faktor() b=product() { return a+b;}
}

String product() throws UnknownSymbolException:
{
    String a = null;
    String b = null;
}
{
    ("*" a=faktor() b=product() {return a + b + "*";}
    | "/" a=faktor() b=product() {return a + b + "/";})? 
    {return "";}
}

String faktor() throws UnknownSymbolException:
{
    Token a;
    Token b;
    String s = null;
}
{
    a=<NUMBER> {return a.image.toString();}
    | b=<IDENT> {return st.getSymbol(b.image.toString());}
    | "(" s=expression() ")" {return s;}
}

