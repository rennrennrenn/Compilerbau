/* Generated By:JavaCC: Do not edit this line. ExprsParse.java */
import java.util.ArrayList;
    public class ExprsParse implements ExprsParseConstants {
        public static SymbolTable st = new SymbolTable();
        public static Integer nextId = 1;
        public static Integer jmpId = 0;
        public static ArrayList<Pair> jmpMarker = new ArrayList<Pair>();
        public static void main(String args []) {
            ExprsParse parser = new ExprsParse(System.in);
           try {
                parser.start();
                System.out.println("Ausdruck ok");
            } catch (Exception e) {
                System.out.println("Ausdruck nicht ok");
                System.out.println(e);
            }
        }

        public static void addToList(String type){
            Pair<String,String> p = new Pair<String,String>();
            p.first = type;
            p.second = "<jmp" + jmpId +">";
            jmpMarker.add(p);
            jmpId++;
        }

        public static String clean(String ds){
            String s ="";
            String e = "";
            int st = -1;
            int en = -1;
            while( ds.indexOf("(") != -1 || ds.indexOf("<") != -1 ){

                 st = ds.indexOf("(");
                if( st != -1){
                    en = ds.indexOf(")");
                    s = ds.substring(0,st) + "0000";
                    e = ds.substring(en+1);
                    ds = s+e;
                }
                st = ds.indexOf("<");
                if( st != -1){
                    en = ds.indexOf(">");
                    s = ds.substring(0,st) + "0000";
                    e = ds.substring(en+1);
                    ds = s+e;
                }

            }
            return ds;
        }

        static String formatToHex(String zeros, String content) {
            int a = Integer.parseInt(content);
            String b = Integer.toHexString(a);
            return (zeros + b).substring(b.length());
        }

        static String formatToNegHex(Integer con){
            String b = Integer.toBinaryString(con);
            b = ("00000000000000000000000000000000" + b).substring(b.length());
            System.out.println(b);
            b = b.replace("1","X");
            b = b.replace("0","1");
            b = b.replace("X","0");
            Integer ret = binaryToInteger(b);
            return formatToHex("0000", Integer.toString(ret + 1));
        }

        static Integer binaryToInteger(String binary){
            char[] numbers = binary.toCharArray();
            Integer result = 0;
            int count = 0;
            for(int i=numbers.length-1;i>=0;i--){
                 if(numbers[i]=='1')result+=(int)Math.pow(2, count);
                 count++;
            }
            return result;
        }


        public static String handleJmpMarker(String content){
            for(int i = jmpMarker.size() - 1; i >=0; i--){
                Pair<String,String> p = jmpMarker.get(i);
                String m = p.second;
                String tmp = content;
                int s = tmp.indexOf(m);
                int e = tmp.lastIndexOf(m);
                tmp = tmp.substring(s+m.length(),e);
                tmp = tmp.trim();
                tmp = clean(tmp);
                int t = (tmp.length() /2) + 2;
                String size = "";
                if(p.first == "F"){
                    size = formatToHex("0000",Integer.toString(t));
                    content = content.substring(0, e) + content.substring(e+m.length());
                } else{
                    size = formatToNegHex(t);
                    content = content.substring(0, s) + content.substring(s+m.length());
                }
                content = content.replace(m,size);
            }

            return content;
        }

  static final public void start() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
 String a = null;
    a = programm();
    jj_consume_token(0);
        a=handleJmpMarker(a);
        System.out.println(a);
  }

  static final public String programm() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    String a ="";
    String b ="";
    constDecl();
    a = varDecl();
    b = statement();
                                           {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public void constDecl() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      jj_consume_token(INT);
      constZuw();
      constList();
      jj_consume_token(13);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void constZuw() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    Token a = null;
    Token b = null;
    String c = "";
    a = jj_consume_token(IDENT);
    jj_consume_token(14);
    b = jj_consume_token(NUMBER);
        c = formatToHex("00", b.image);
        st.addConstant(a.image.toString(), c);
  }

  static final public void constList() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      constZuw();
      constList();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public String varDecl() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    String a ="";
    String b ="";
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      t = jj_consume_token(IDENT);
      a = varZuw(t.image.toString());
      b = varList();
      jj_consume_token(13);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String varZuw(String s) throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    Token t = null;
    String a = "";
    String b = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      t = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        if (t == null){
            a = "1000";
            b = "00";
        }else if (Integer.parseInt(t.image) < 256){
            b = formatToHex("00", t.image);
            a = "10" + b;
        } else{
            b = formatToHex("0000", t.image);
            a = "11" + b;
        }

        st.addVariable(s, formatToHex("00", nextId.toString()), b);

        a += " 36" + formatToHex("00", nextId.toString()) + " ";
        nextId+= 1;
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String varList() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    String a = "";
    String b = "";
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      t = jj_consume_token(IDENT);
      a = varZuw(t.image);
      b = varList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                                                    {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String expression() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    a = term();
    b = sum();
                      {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String sum() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        a = term();
        b = sum();
                           {if (true) return a+b + "60 ";}
        break;
      case 17:
        jj_consume_token(17);
        a = term();
        b = sum();
                            {if (true) return a+b + "64 ";}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String term() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    a = faktor();
    b = product();
                            {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String product() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case 19:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        jj_consume_token(18);
        a = faktor();
        b = product();
                                  {if (true) return a+ "68 " +b;}
        break;
      case 19:
        jj_consume_token(19);
        a = faktor();
        b = product();
                                   {if (true) return a+ "6c "+b;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
     {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String faktor() throws ParseException, UnknownSymbolException {
    String a = "";
    Token t1= null;
    Token t2= null;
    Pair b = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t1 = jj_consume_token(NUMBER);
                 {if (true) return "10" + formatToHex("00", t1.image) + " ";}
      break;
    case IDENT:
      t2 = jj_consume_token(IDENT);
        b = st.getSymbol(t2.image);
        if(b.first == "CONST"){
            {if (true) return "10" + b.second+" ";}
        } else{
            {if (true) return "15" + b.second+" ";}
        }
      break;
    case 20:
      jj_consume_token(20);
      a = expression();
      jj_consume_token(21);
                              {if (true) return a;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String statement() throws ParseException, UnknownSymbolException {
    String a= "";
    String b = "";
    String c = "";
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
      jj_consume_token(14);
      a = expression();
      jj_consume_token(13);
           a+= "36" + st.getSymbol(t.image).second + " ";
      break;
    case 22:
      jj_consume_token(22);
      a = expression();
      jj_consume_token(23);
                                    {if (true) return a+ "b8(print) ";}
      break;
    case 24:
      jj_consume_token(24);
      a = stmtList();
      jj_consume_token(25);
                             {if (true) return a;}
      break;
    case IF:
      jj_consume_token(IF);
      a = condition();
      b = statement();
      c = optElse();
        String marker = "<jmp" + jmpId +"> ";
        addToList("F");
        {if (true) return a + marker + b + marker + c ;}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      a = condition();
      b = statement();
        String m2 = "<jmp" + jmpId +"> ";
        addToList("B");
        String m1 = "<jmp" + jmpId +"> ";
        addToList("F");
        {if (true) return m2 +a +m1+ b + "a7 "+m2+m1;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return a+b+c;}
    throw new Error("Missing return statement in function");
  }

  static final public String stmtList() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case IDENT:
    case 22:
    case 24:
      a = statement();
      b = stmtList();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                                   {if (true) return a+b;}
    throw new Error("Missing return statement in function");
  }

  static final public String condition() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    String c = "";
    Token t = null;
    a = expression();
    t = jj_consume_token(COMPOP);
    b = expression();
        switch(t.image){
            case "==":
                c = "a0 ";
                break;
            case "!=":
                c = "9f ";
                break;
            case ">=":
                c = "a1 ";
                break;
            case "<=":
                c = "a3 ";
                break;
            case "<":
                c = "a2 ";
                break;
            case ">":
                c = "a4 ";
                break;
        }
        {if (true) return a+b+c;}
    throw new Error("Missing return statement in function");
  }

  static final public String optElse() throws ParseException, UnknownSymbolException {
    String a = "";
    String b = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      a = statement();
        String c = "<jmp" + jmpId + "> ";
        addToList("F");
        b = "a7 " + c;
        {if (true) return b+ a+c;}
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ExprsParseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x8000,0x20,0x4000,0x8000,0x30000,0x30000,0xc0000,0xc0000,0x101800,0x14010c0,0x14010c0,0x200,};
   }

  /** Constructor with InputStream. */
  public ExprsParse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprsParse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprsParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExprsParse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprsParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExprsParse(ExprsParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExprsParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
